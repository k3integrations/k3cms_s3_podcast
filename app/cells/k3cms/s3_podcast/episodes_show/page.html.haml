= render_cell('k3cms/s3_podcast/episodes', :context_ribbon, :episode => @episode)

%div{:class => k3cms_s3_podcast_episode_classes(@episode) + ['show_large'], :id => dom_id(@episode)}
  = render_cell 'k3cms/s3_podcast/episodes', :published_status, :episode => @episode

  %h2.title
    - if can?(:edit, K3cms::S3Podcast::Episode) && edit_mode?
      = inline_editable('span', @episode, :title) do
        = raw @episode.title
    - else
      = raw @episode.title

  .display_date
    %label Publish date:
    - if can?(:edit, K3cms::S3Podcast::Episode) && edit_mode?
      = inline_editable('span', @episode, :display_date) do
        = raw @episode.display_date
    - else
      = @episode.display_date && @episode.display_date.to_s(:long)

  .description
    - if can?(:edit, K3cms::S3Podcast::Episode) && edit_mode?
      = inline_editable('div', @episode, :description) do
        = raw @episode.description
    - else
      = raw @episode.description

  = k3cms_s3_podcast_video_player @episode

  .download_link
    = link_to(image_tag('k3cms/s3_podcast/video.png') + ' Download Video', @episode.download_url)

  .tags
    %label Tags:
    - if can?(:edit, @episode) && edit_mode?
      = best_in_place @episode, :tag_list, :type => :input
    - else
      = k3cms_s3_podcast_episode_linked_tag_list(@episode)

:javascript
  $(function() {
    var this_episode_box = $('.edit_mode_on .k3cms_s3_podcast_episode.show_large##{dom_id(@episode)}}');
    var this_context_ribbon_selector = '.context_ribbon.#{dom_id(@episode)}}';

    this_episode_box.tooltip({
      //events: {tooltip: "mouseenter"},
      delay: 100,
      position: 'top left',
      relative: true,
      tip: this_context_ribbon_selector,
      offset: [0, 0], // We don't want any gap or tooltip may disappear while moving mouse up through the gap.
      onBeforeShow: function() {
        var conf = this.getConf();
        this.getTip().css('width', this.getTrigger().innerWidth()-10 + 'px');
        conf.offset[1] = this.getTrigger().outerWidth();
      },
      onShow: function() {
        this.getTrigger().addClass('active');
      },
      onHide: function() {
        this.getTrigger().removeClass('active');
      },
    });
  });

